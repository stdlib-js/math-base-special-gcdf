{
  "version": 3,
  "sources": ["../lib/bitwise_binary_gcd.js", "../lib/binary_gcd.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the greatest common divisor (gcd) of two single-precision floating-point numbers using the binary GCD algorithm and bitwise operations.\n*\n* ## References\n*\n* -   Stein, Josef. 1967. \"Computational problems associated with Racah algebra.\" _Journal of Computational Physics_ 1 (3): 397\u2013405. doi:[10.1016/0021-9991(67)90047-2][@stein:1967].\n*\n* [@stein:1967]: https://doi.org/10.1016/0021-9991(67)90047-2\n*\n* @private\n* @param {integer32} a - first number\n* @param {integer32} b - second number\n* @returns {integer32} greatest common divisor\n*\n* @example\n* var v = gcdf( 48, 18 );\n* // returns 6\n*/\nfunction gcdf( a, b ) {\n\tvar k = 0;\n\tvar t;\n\n\t// Simple cases:\n\tif ( a === 0 ) {\n\t\treturn b;\n\t}\n\tif ( b === 0 ) {\n\t\treturn a;\n\t}\n\n\t// Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...\n\twhile ( ( a & 1 ) === 0 && ( b & 1 ) === 0 ) {\n\t\ta >>>= 1; // right shift\n\t\tb >>>= 1; // right shift\n\t\tk += 1;\n\t}\n\n\t// Reduce `a` to an odd number...\n\twhile ( ( a & 1 ) === 0 ) {\n\t\ta >>>= 1; // right shift\n\t}\n\n\t// Henceforth, `a` is always odd...\n\twhile ( b ) {\n\t\t// Remove all factors of 2 in `b`, as they are not common...\n\t\twhile ( ( b & 1 ) === 0 ) {\n\t\t\tb >>>= 1; // right shift\n\t\t}\n\n\t\t// `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...\n\t\tif ( a > b ) {\n\t\t\tt = b;\n\t\t\tb = a;\n\t\t\ta = t;\n\t\t}\n\t\tb -= a; // b=0 iff b=a\n\t}\n\n\t// Restore common factors of 2...\n\treturn a << k;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcdf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the greatest common divisor (gcd) of two single-precision floating-point numbers using the binary GCD algorithm.\n*\n* ## References\n*\n* -   Stein, Josef. 1967. \"Computational problems associated with Racah algebra.\" _Journal of Computational Physics_ 1 (3): 397\u2013405. doi:[10.1016/0021-9991(67)90047-2][@stein:1967].\n*\n* [@stein:1967]: https://doi.org/10.1016/0021-9991(67)90047-2\n*\n* @private\n* @param {integer} a - first number\n* @param {integer} b - second number\n* @returns {integer} greatest common divisor\n*\n* @example\n* var v = gcdf( 16777216, 65536 );\n* // returns 65536\n*/\nfunction gcdf( a, b ) {\n\tvar k = 1;\n\tvar t;\n\n\t// Simple cases:\n\tif ( a === 0 ) {\n\t\treturn b;\n\t}\n\tif ( b === 0 ) {\n\t\treturn a;\n\t}\n\n\t// Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...\n\twhile ( a % 2 === 0 && b % 2 === 0 ) {\n\t\ta /= 2; // right shift\n\t\tb /= 2; // right shift\n\t\tk *= 2; // left shift\n\t}\n\n\t// Reduce `a` to an odd number...\n\twhile ( a % 2 === 0 ) {\n\t\ta /= 2; // right shift\n\t}\n\n\t// Henceforth, `a` is always odd...\n\twhile ( b ) {\n\t\t// Remove all factors of 2 in `b`, as they are not common...\n\t\twhile ( b % 2 === 0 ) {\n\t\t\tb /= 2; // right shift\n\t\t}\n\n\t\t// `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...\n\t\tif ( a > b ) {\n\t\t\tt = b;\n\t\t\tb = a;\n\t\t\ta = t;\n\t\t}\n\t\tb -= a; // b=0 iff b=a\n\t}\n\n\t// Restore common factors of 2...\n\treturn k * a;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcdf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isIntegerf = require( '@stdlib/math-base-assert-is-integerf' );\nvar PINF = require( '@stdlib/constants-float32-pinf' );\nvar NINF = require( '@stdlib/constants-float32-ninf' );\nvar INT32_MAX = require( '@stdlib/constants-int32-max' );\nvar bitwisef = require( './bitwise_binary_gcd.js' );\nvar largeIntegersf = require( './binary_gcd.js' );\n\n\n// MAIN //\n\n/**\n* Computes the greatest common divisor (gcd) of two single-precision floating-point numbers.\n*\n* @param {integer} a - first number\n* @param {integer} b - second number\n* @returns {integer} greatest common divisor\n*\n* @example\n* var v = gcdf( 48, 18 );\n* // returns 6\n*\n* @example\n* var v = gcdf( 3.14, 18 );\n* // returns NaN\n*\n* @example\n* var v = gcdf( NaN, 18 );\n* // returns NaN\n*/\nfunction gcdf( a, b ) {\n\tif ( isnanf( a ) || isnanf( b ) ) {\n\t\treturn NaN;\n\t}\n\tif (\n\t\ta === PINF ||\n\t\tb === PINF ||\n\t\ta === NINF ||\n\t\tb === NINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( !( isIntegerf( a ) && isIntegerf( b ) ) ) {\n\t\treturn NaN;\n\t}\n\tif ( a < 0 ) {\n\t\ta = -a;\n\t}\n\tif ( b < 0 ) {\n\t\tb = -b;\n\t}\n\tif ( a <= INT32_MAX && b <= INT32_MAX ) {\n\t\treturn bitwisef( a, b );\n\t}\n\treturn largeIntegersf( a, b );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gcdf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the greatest common divisor (gcd) of two single-precision floating-point numbers.\n*\n* @module @stdlib/math-base-special-gcdf\n*\n* @example\n* var gcd = require( '@stdlib/math-base-special-gcdf' );\n*\n* var v = gcdf( 48, 18 );\n* // returns 6\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsCA,SAASC,EAAMC,EAAGC,EAAI,CACrB,IAAIC,EAAI,EACJ,EAGJ,GAAKF,IAAM,EACV,OAAOC,EAER,GAAKA,IAAM,EACV,OAAOD,EAIR,MAAUA,EAAI,KAAQ,IAAOC,EAAI,KAAQ,GACxCD,KAAO,EACPC,KAAO,EACPC,GAAK,EAIN,MAAUF,EAAI,KAAQ,GACrBA,KAAO,EAIR,KAAQC,GAAI,CAEX,MAAUA,EAAI,KAAQ,GACrBA,KAAO,EAIHD,EAAIC,IACR,EAAIA,EACJA,EAAID,EACJA,EAAI,GAELC,GAAKD,CACN,CAGA,OAAOA,GAAKE,CACb,CAKAJ,EAAO,QAAUC,ICrFjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsCA,SAASC,EAAMC,EAAGC,EAAI,CACrB,IAAIC,EAAI,EACJ,EAGJ,GAAKF,IAAM,EACV,OAAOC,EAER,GAAKA,IAAM,EACV,OAAOD,EAIR,KAAQA,EAAI,IAAM,GAAKC,EAAI,IAAM,GAChCD,GAAK,EACLC,GAAK,EACLC,GAAK,EAIN,KAAQF,EAAI,IAAM,GACjBA,GAAK,EAIN,KAAQC,GAAI,CAEX,KAAQA,EAAI,IAAM,GACjBA,GAAK,EAIDD,EAAIC,IACR,EAAIA,EACJA,EAAID,EACJA,EAAI,GAELC,GAAKD,CACN,CAGA,OAAOE,EAAIF,CACZ,CAKAF,EAAO,QAAUC,ICrFjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAa,QAAS,sCAAuC,EAC7DC,EAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,gCAAiC,EACjDC,EAAY,QAAS,6BAA8B,EACnDC,EAAW,IACXC,EAAiB,IAwBrB,SAASC,EAAMC,EAAGC,EAAI,CACrB,OAAKT,EAAQQ,CAAE,GAAKR,EAAQS,CAAE,EACtB,IAGPD,IAAMN,GACNO,IAAMP,GACNM,IAAML,GACNM,IAAMN,EAEC,IAEAF,EAAYO,CAAE,GAAKP,EAAYQ,CAAE,GAGpCD,EAAI,IACRA,EAAI,CAACA,GAEDC,EAAI,IACRA,EAAI,CAACA,GAEDD,GAAKJ,GAAaK,GAAKL,EACpBC,EAAUG,EAAGC,CAAE,EAEhBH,EAAgBE,EAAGC,CAAE,GAXpB,GAYT,CAKAV,EAAO,QAAUQ,IChDjB,IAAIG,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_bitwise_binary_gcd", "__commonJSMin", "exports", "module", "gcdf", "a", "b", "k", "require_binary_gcd", "__commonJSMin", "exports", "module", "gcdf", "a", "b", "k", "require_main", "__commonJSMin", "exports", "module", "isnanf", "isIntegerf", "PINF", "NINF", "INT32_MAX", "bitwisef", "largeIntegersf", "gcdf", "a", "b", "main"]
}
